{"ast":null,"code":"import { Observable } from 'rxjs/Observable';\nimport { catchError, retry } from 'rxjs/operators';\nimport { API_URL } from '../env';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChatbotApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  static _handleError(err) {\n    return Observable.throw(err.message || 'Error: Unable to complete request.');\n  }\n  // GET list of public, future events\n  getChatbot() {\n    return this.http.get(`${API_URL}/`).pipe(retry(1), catchError(error => {\n      return throwError(error.message);\n    }));\n  }\n}\nChatbotApiService.ɵfac = function ChatbotApiService_Factory(t) {\n  return new (t || ChatbotApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nChatbotApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatbotApiService,\n  factory: ChatbotApiService.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,UAAU,EAAEC,KAAK,QAAQ,gBAAgB;AAClD,SAAQC,OAAO,QAAO,QAAQ;;;AAI9B,OAAM,MAAOC,iBAAiB;EAE5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EACxB;EAEQ,OAAOC,YAAY,CAACC,GAA4B;IACtD,OAAOR,UAAU,CAACS,KAAK,CAACD,GAAG,CAACE,OAAO,IAAI,oCAAoC,CAAC;EAC9E;EAEA;EACAC,UAAU;IACR,OAAO,IAAI,CAACL,IAAI,CACbM,GAAG,CAAC,GAAGT,OAAO,GAAG,CAAC,CAACU,IAAI,CACtBX,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAACa,KAAK,IAAG;MAC3B,OAAOC,UAAU,CAACD,KAAK,CAACJ,OAAO,CAAC;IAClC,CAAC,CAAC,CAAC;EACT;;AAhBWN,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAY,SAAjBZ,iBAAiB;AAAA","names":["Observable","catchError","retry","API_URL","ChatbotApiService","constructor","http","_handleError","err","throw","message","getChatbot","get","pipe","error","throwError","factory"],"sourceRoot":"","sources":["/Users/jordisaleilles/Desktop/MECC/MECC/frontend/src/app/chatbot/chatbot-api.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { catchError, retry } from 'rxjs/operators';\nimport {API_URL} from '../env';\nimport {Chatbot} from './chatbot.model';\n\n@Injectable()\nexport class ChatbotApiService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  private static _handleError(err: HttpErrorResponse | any) {\n    return Observable.throw(err.message || 'Error: Unable to complete request.');\n  }\n\n  // GET list of public, future events\n  getChatbot(): Observable<Chatbot[]> {\n    return this.http\n      .get(`${API_URL}/`).pipe(\n        retry(1), catchError(error => {\n          return throwError(error.message);\n        }));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}