{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { API_URL } from '../env';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChatbotApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  static _handleError(err) {\n    return throwError(err.message || 'Error: Unable to complete request.');\n  }\n  // GET list of public, future events\n  getChatbot() {\n    return this.http.get(`${API_URL}/`).pipe(retry(1), catchError(ExamsApiService => {\n      return throwError(ExamsApiService._handleError);\n    }));\n  }\n}\nChatbotApiService.ɵfac = function ChatbotApiService_Factory(t) {\n  return new (t || ChatbotApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nChatbotApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatbotApiService,\n  factory: ChatbotApiService.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAAoBA,UAAU,QAAO,MAAM;AAC3C,SAAQC,UAAU,EAAEC,KAAK,QAAO,gBAAgB;AAChD,SAAQC,OAAO,QAAO,QAAQ;;;AAI9B,OAAM,MAAOC,iBAAiB;EAE5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EACxB;EAEQ,OAAOC,YAAY,CAACC,GAA4B;IACtD,OAAOR,UAAU,CAACQ,GAAG,CAACC,OAAO,IAAI,oCAAoC,CAAC;EACxE;EAEA;EACAC,UAAU;IACR,OAAO,IAAI,CAACJ,IAAI,CACbK,GAAG,CAAC,GAAGR,OAAO,GAAG,CAAC,CAACS,IAAI,CACtBV,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAACY,eAAe,IAAG;MACrC,OAAOb,UAAU,CAACa,eAAe,CAACN,YAAY,CAAC;IACjD,CAAC,CAAC,CAAC;EACT;;AAhBWH,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAU,SAAjBV,iBAAiB;AAAA","names":["throwError","catchError","retry","API_URL","ChatbotApiService","constructor","http","_handleError","err","message","getChatbot","get","pipe","ExamsApiService","factory"],"sourceRoot":"","sources":["/Users/jordisaleilles/Desktop/MECC/MECC/frontend/src/app/chatbot/chatbot-api.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError, retry} from 'rxjs/operators';\nimport {API_URL} from '../env';\nimport {Chatbot} from './chatbot.model';\n\n@Injectable()\nexport class ChatbotApiService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  private static _handleError(err: HttpErrorResponse | any) {\n    return throwError(err.message || 'Error: Unable to complete request.');\n  }\n\n  // GET list of public, future events\n  getChatbot(): Observable<Chatbot[]> {\n    return this.http\n      .get(`${API_URL}/`).pipe(\n        retry(1), catchError(ExamsApiService => {\n          return throwError(ExamsApiService._handleError);\n        }));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}