{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./chatbot/chatbot-api.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"chatListContainer\"];\nconst _c1 = function (a0, a1) {\n  return {\n    \"right\": a0,\n    \"left\": a1\n  };\n};\nfunction AppComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 10)(2, \"p\", 7);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(2, _c1, (item_r2 == null ? null : item_r2.user == null ? null : item_r2.user.id) == ctx_r1.human.id, (item_r2 == null ? null : item_r2.user == null ? null : item_r2.user.id) != ctx_r1.human.id));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r2 == null ? null : item_r2.message);\n  }\n}\nexport class AppComponent {\n  constructor(chatbotApi, router) {\n    this.chatbotApi = chatbotApi;\n    this.router = router;\n    this.title = 'chat-ui';\n    this.message = \"\";\n    this.chatbot = {\n      messages: [\"\"]\n    };\n    this.chatInputMessage = \"\";\n    this.human = {\n      id: 1\n    };\n    this.bot = {\n      id: 2\n    };\n    this.chatMessages = [{\n      user: this.bot,\n      message: \"Hello I'm MECC or Miscellaneous Educational Cybersecurity Chatbot\\n\"\n    }, {\n      user: this.bot,\n      message: \"A chatbot specialized in cybersecurity education and sensibilization.\"\n    }];\n  }\n  ngAfterViewChecked() {\n    this.scrollToBottom();\n  }\n  saveChatbot() {\n    this.chatbot.messages = [this.message];\n    this.chatMessages.push({\n      message: this.message,\n      user: this.human\n    });\n    this.chatbotApi.send(this.chatbot).subscribe(data => {\n      this.receive(data.messages);\n    });\n    this.chatbotApi.saveChatbot(this.chatbot).subscribe(() => this.router.navigate(['/']), error => alert(error.message));\n    this.chatInputMessage = \"\";\n    this.scrollToBottom();\n  }\n  receive(messages) {\n    for (let i = 0; i < messages.length; i++) {\n      if (messages[i] != \"\") {\n        this.chatMessages.push({\n          message: messages[i],\n          user: this.bot\n        });\n      }\n    }\n    this.scrollToBottom();\n  }\n  scrollToBottom() {\n    const maxScroll = this.list?.nativeElement.scrollHeight;\n    this.list?.nativeElement.scrollTo({\n      top: maxScroll,\n      behavior: 'smooth'\n    });\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.ChatbotApiService), i0.ɵɵdirectiveInject(i2.Router));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  viewQuery: function AppComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.list = _t.first);\n    }\n  },\n  decls: 19,\n  vars: 3,\n  consts: [[1, \"container\"], [1, \"card\"], [1, \"chat-list\"], [\"chatListContainer\", \"\"], [4, \"ngFor\", \"ngForOf\"], [1, \"chat-footer\"], [1, \"chat-item\"], [\"id\", \"message-body\"], [\"matInput\", \"\", \"id\", \"chat-textarea\", \"required\", \"\", 3, \"ngModel\", \"keydown.enter\", \"ngModelChange\"], [\"id\", \"send-button\", 3, \"disabled\", \"click\", \"keydown.enter\"], [1, \"chat-item\", 3, \"ngClass\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2, 3);\n      i0.ɵɵtemplate(4, AppComponent_ng_container_4_Template, 4, 5, \"ng-container\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 5)(6, \"div\", 6)(7, \"button\", 7);\n      i0.ɵɵtext(8, \"Phishing\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 7);\n      i0.ɵɵtext(10, \"Ransomware\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 7);\n      i0.ɵɵtext(12, \"Data storage\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 7);\n      i0.ɵɵtext(14, \"Authentification\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(15, \"div\", 5)(16, \"input\", 8);\n      i0.ɵɵlistener(\"keydown.enter\", function AppComponent_Template_input_keydown_enter_16_listener() {\n        return ctx.saveChatbot();\n      })(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_16_listener($event) {\n        return ctx.message = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_17_listener() {\n        return ctx.saveChatbot();\n      })(\"keydown.enter\", function AppComponent_Template_button_keydown_enter_17_listener() {\n        return ctx.saveChatbot();\n      });\n      i0.ɵɵtext(18, \" send \");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.chatMessages);\n      i0.ɵɵadvance(12);\n      i0.ɵɵproperty(\"ngModel\", ctx.message);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.message === \"\");\n    }\n  },\n  dependencies: [i3.NgClass, i3.NgForOf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.RequiredValidator, i4.NgModel],\n  styles: [\".container[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  margin-left: 18px;\\n  margin-right: 18px;\\n  margin-top: 100px;\\n}\\n.card[_ngcontent-%COMP%] {\\n  background: #bbb;\\n  height: 60%;\\n  width: 500px;\\n  height: 500px;\\n  display: flex;\\n  flex-direction: column;\\n  filter: drop-shadow(0px 0px 5px black);\\n  padding: 16px;\\n}\\n.chat-list[_ngcontent-%COMP%] {\\n  margin-top: auto;\\n  display: flex;\\n  flex-direction: column;\\n  padding: 16px;\\n  overflow-y: scroll;\\n}\\n.chat-list[_ngcontent-%COMP%]   .chat-item[_ngcontent-%COMP%] {\\n  max-width: 80%;\\n  margin: 8px 0px;\\n  display: flex;\\n  flex-direction: row;\\n}\\n.chat-list[_ngcontent-%COMP%]   .chat-item[_ngcontent-%COMP%]   #message-body[_ngcontent-%COMP%] {\\n  background: #6f6f6f;\\n  margin: auto 8px;\\n  padding: 12px 24px;\\n  border-radius: 30px;\\n  color: white;\\n  display: flex;\\n  flex-direction: row;\\n}\\n.chat-list[_ngcontent-%COMP%]   .left[_ngcontent-%COMP%] {\\n  margin-right: auto;\\n  margin-left: 8px;\\n}\\n.chat-list[_ngcontent-%COMP%]   .left[_ngcontent-%COMP%]   #message-body[_ngcontent-%COMP%] {\\n  margin-left: -10px;\\n}\\n.chat-list[_ngcontent-%COMP%]   .right[_ngcontent-%COMP%] {\\n  margin-right: 8px;\\n  margin-left: auto;\\n  flex-direction: row-reverse;\\n}\\n.chat-list[_ngcontent-%COMP%]   .right[_ngcontent-%COMP%]   #message-body[_ngcontent-%COMP%] {\\n  background: #14ab32;\\n  margin-right: -10px;\\n}\\n.chat-footer[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n  padding: 16px;\\n  background: #6f6f6f;\\n  border-radius: 6px;\\n}\\n.chat-footer[_ngcontent-%COMP%]   #chat-textarea[_ngcontent-%COMP%] {\\n  flex: 1;\\n  margin: 0 8px;\\n  border: 0px;\\n  box-shadow: 0 0 16px rgba(0, 0, 0, 0.5);\\n  padding: 16px;\\n}\\n.chat-footer[_ngcontent-%COMP%]   #send-button[_ngcontent-%COMP%] {\\n  border: 0;\\n  box-shadow: 0 0 16px rgba(0, 0, 0, 0.5);\\n  background: white;\\n  color: #6f6f6f;\\n  padding: 0 8px;\\n}\\n[_ngcontent-%COMP%]::-webkit-scrollbar {\\n  display: none;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5sZXNzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBO0VBQ0MsYUFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0VBQ0EsaUJBQUE7QUFGRDtBQUtBO0VBQ0MsZ0JBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxzQ0FBQTtFQUNBLGFBQUE7QUFIRDtBQU9BO0VBQ0MsZ0JBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxhQUFBO0VBQ0Esa0JBQUE7QUFMRDtBQUFBO0VBUUcsY0FBQTtFQUNBLGVBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7QUFMSDtBQU5BO0VBY0ssbUJBQUE7RUFDQSxnQkFBQTtFQUNBLGtCQUFBO0VBQ0EsbUJBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0FBTEw7QUFmQTtFQXlCRyxrQkFBQTtFQUNBLGdCQUFBO0FBUEg7QUFuQkE7RUE2Qkssa0JBQUE7QUFQTDtBQXRCQTtFQWtDRyxpQkFBQTtFQUNBLGlCQUFBO0VBQ0EsMkJBQUE7QUFUSDtBQTNCQTtFQXVDSyxtQkFBQTtFQUNBLG1CQUFBO0FBVEw7QUFjQTtFQUNDLGFBQUE7RUFDQSxtQkFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQUFBO0FBWkQ7QUFPQTtFQVFHLE9BQUE7RUFDQSxhQUFBO0VBQ0EsV0FBQTtFQUNBLHVDQUFBO0VBQ0EsYUFBQTtBQVpIO0FBQUE7RUFnQkcsU0FBQTtFQUNBLHVDQUFBO0VBQ0EsaUJBQUE7RUFDQSxjQUFBO0VBQ0EsY0FBQTtBQWJIO0FBa0JBO0VBQ0MsYUFBQTtBQWhCRCIsInNvdXJjZXNDb250ZW50IjpbIkBiYWNrZ3JvdW5kOiAjYmJiO1xuQHByaW1hcnk6ICM2ZjZmNmY7XG5cbi5jb250YWluZXIge1xuIGRpc3BsYXk6IGZsZXg7XG4ganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gYWxpZ24taXRlbXM6IGNlbnRlcjtcbiBtYXJnaW4tbGVmdDogMThweDtcbiBtYXJnaW4tcmlnaHQ6IDE4cHg7XG4gbWFyZ2luLXRvcDogMTAwcHg7XG59XG5cbi5jYXJkIHtcbiBiYWNrZ3JvdW5kOiBAYmFja2dyb3VuZDtcbiBoZWlnaHQ6IDYwJTtcbiB3aWR0aDogNTAwcHg7XG4gaGVpZ2h0OiA1MDBweDtcbiBkaXNwbGF5OiBmbGV4O1xuIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gZmlsdGVyOiBkcm9wLXNoYWRvdygwcHggMHB4IDVweCBibGFjayk7XG4gcGFkZGluZzogMTZweDtcblxufVxuXG4uY2hhdC1saXN0IHtcbiBtYXJnaW4tdG9wOiBhdXRvO1xuIGRpc3BsYXk6IGZsZXg7XG4gZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiBwYWRkaW5nOiAxNnB4O1xuIG92ZXJmbG93LXk6IHNjcm9sbDtcblxuIC5jaGF0LWl0ZW0ge1xuICAgbWF4LXdpZHRoOiA4MCU7XG4gICBtYXJnaW46IDhweCAwcHg7XG4gICBkaXNwbGF5OiBmbGV4O1xuICAgZmxleC1kaXJlY3Rpb246IHJvdztcblxuICAgI21lc3NhZ2UtYm9keSB7XG4gICAgIGJhY2tncm91bmQ6IEBwcmltYXJ5O1xuICAgICBtYXJnaW46IGF1dG8gOHB4O1xuICAgICBwYWRkaW5nOiAxMnB4IDI0cHg7XG4gICAgIGJvcmRlci1yYWRpdXM6IDMwcHg7XG4gICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgZGlzcGxheTogZmxleDtcbiAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgIH1cbiB9XG5cbiAubGVmdCB7XG4gICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gICBtYXJnaW4tbGVmdDogOHB4O1xuXG4gICAjbWVzc2FnZS1ib2R5IHtcbiAgICAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xuICAgfVxuIH1cblxuIC5yaWdodCB7XG4gICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlO1xuXG4gICAjbWVzc2FnZS1ib2R5IHtcbiAgICAgYmFja2dyb3VuZDogIzE0YWIzMjtcbiAgICAgbWFyZ2luLXJpZ2h0OiAtMTBweDtcbiAgIH1cbiB9XG59XG5cbi5jaGF0LWZvb3RlciB7XG4gZGlzcGxheTogZmxleDtcbiBmbGV4LWRpcmVjdGlvbjogcm93O1xuIHBhZGRpbmc6IDE2cHg7XG4gYmFja2dyb3VuZDogQHByaW1hcnk7XG4gYm9yZGVyLXJhZGl1czogNnB4O1xuXG4gI2NoYXQtdGV4dGFyZWEge1xuICAgZmxleDogMTtcbiAgIG1hcmdpbjogMCA4cHg7XG4gICBib3JkZXI6IDBweDtcbiAgIGJveC1zaGFkb3c6IDAgMCAxNnB4IHJnYmEoMCwgMCwgMCwgMC41KTtcbiAgIHBhZGRpbmc6IDE2cHg7XG4gfVxuXG4gI3NlbmQtYnV0dG9uIHtcbiAgIGJvcmRlcjogMDtcbiAgIGJveC1zaGFkb3c6IDAgMCAxNnB4IHJnYmEoMCwgMCwgMCwgMC41KTtcbiAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgY29sb3I6IzZmNmY2ZjtcbiAgIHBhZGRpbmc6IDAgOHB4O1xuIH1cblxufVxuXG46Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiBkaXNwbGF5OiBub25lO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","AppComponent","constructor","chatbotApi","router","messages","id","user","bot","message","ngAfterViewChecked","scrollToBottom","saveChatbot","chatbot","chatMessages","push","human","send","subscribe","data","receive","navigate","error","alert","chatInputMessage","i","length","maxScroll","list","nativeElement","scrollHeight","scrollTo","top","behavior","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["/Users/jordisaleilles/Desktop/MECC/MECC/frontend/src/app/app.component.html","/Users/jordisaleilles/Desktop/MECC/MECC/frontend/src/app/app.component.ts"],"sourcesContent":["\n   <div class=\"container\">\n    <div class=\"card\">\n      <div class=\"chat-list\" #chatListContainer>\n        <ng-container *ngFor=\"let item of chatMessages\">\n          <div class=\"chat-item\" [ngClass]=\"{'right' : item?.user?.id == human.id, 'left': item?.user?.id != human.id}\">\n            <p id=\"message-body\">{{item?.message}}</p>\n          </div>\n        </ng-container>\n      </div>\n      <div class=\"chat-footer\">\n      <div class=\"chat-item\">\n          <button id=\"message-body\">Phishing</button>\n          <button id=\"message-body\">Ransomware</button>\n          <button id=\"message-body\">Data storage</button>\n          <button id=\"message-body\">Authentification</button>\n        </div>\n      </div>\n      <div class=\"chat-footer\">\n        <input matInput id=\"chat-textarea\" (keydown.enter)=\"saveChatbot()\" [(ngModel)]=\"message\" required>\n        <button id=\"send-button\" (click)=\"saveChatbot()\" (keydown.enter)=\"saveChatbot()\" [disabled]=\"message === ''\">\n          send\n        </button>\n      </div>\n    </div>\n   </div>","import {Component, ElementRef, ViewChild} from '@angular/core';\nimport {ChatbotApiService} from \"./chatbot/chatbot-api.service\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.less']\n})\nexport class AppComponent {\n title = 'chat-ui';\n\n message = \"\";\n\n chatbot = {\n     messages: [\"\"],\n };\n\n constructor(private chatbotApi: ChatbotApiService, private router: Router) { }\n\n @ViewChild('chatListContainer') list?: ElementRef<HTMLDivElement>;\n chatInputMessage: string = \"\";\n human = {\n    id: 1\n  }\n\n  bot = {\n    id: 2\n  }\n\n chatMessages: {\n  user: any,\n  message: string\n}[] = [\n  {\n    user: this.bot,\n    message: \"Hello I'm MECC or Miscellaneous Educational Cybersecurity Chatbot\\n\"\n  },\n  {\n    user: this.bot,\n    message: \"A chatbot specialized in cybersecurity education and sensibilization.\"\n  }\n];\n\n ngAfterViewChecked() {\n   this.scrollToBottom()\n }\n\n\n saveChatbot() {\n  this.chatbot.messages = [this.message];\n  this.chatMessages.push({\n    message:  this.message,\n    user: this.human\n  });\n  this.chatbotApi.send(this.chatbot).subscribe(data => {\n    this.receive(data.messages);\n  });\n  this.chatbotApi\n    .saveChatbot(this.chatbot)\n    .subscribe(\n      () => this.router.navigate(['/']),\n      error => alert(error.message)\n    );\n  this.chatInputMessage = \"\"\n  this.scrollToBottom()\n}\n\nreceive(messages: Array<string>) {\n  for(let i=0; i<messages.length; i++){\n    if(messages[i] != \"\"){\n      this.chatMessages.push({\n        message: messages[i],\n        user: this.bot\n      });\n    }\n  }\nthis.scrollToBottom()\n}\n scrollToBottom() {\n   const maxScroll = this.list?.nativeElement.scrollHeight;\n   this.list?.nativeElement.scrollTo({top: maxScroll, behavior: 'smooth'});\n }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}