{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nlet AppComponent = class AppComponent {\n  constructor(chatbotApi, router, _sanitizer) {\n    this.chatbotApi = chatbotApi;\n    this.router = router;\n    this._sanitizer = _sanitizer;\n    this.title = 'chat-ui';\n    this.message = \"\";\n    this.chatbot = {\n      messages: [{\n        \"df_type\": \"\",\n        \"text\": \"\"\n      }]\n    };\n    this.chatInputMessage = \"\";\n    this.human = {\n      id: 1\n    };\n    this.bot = {\n      id: 2\n    };\n    this.chatMessages = [{\n      user: this.bot,\n      message: \"Hey!\",\n      quick_replies: [],\n      type: \"text\"\n    }];\n  }\n  ngAfterViewChecked() {\n    this.scrollToBottom();\n  }\n  saveChatbot() {\n    this.chatbot.messages = [{\n      \"df_type\": \"text\",\n      \"text\": this.message\n    }];\n    this.chatMessages.push({\n      message: this.message,\n      quick_replies: [],\n      user: this.human,\n      type: \"text\"\n    });\n    this.chatbotApi.send(this.chatbot).subscribe(data => {\n      console.log(\"-----------> \", data.messages);\n      this.receive(data.messages);\n    });\n    this.chatbotApi.saveChatbot(this.chatbot).subscribe(() => this.router.navigate(['/']), error => alert(error.message));\n    this.chatInputMessage = \"\";\n    this.scrollToBottom();\n  }\n  replaceInput(quick_reply) {\n    console.log(\"REPLY : \", quick_reply);\n    this.chatbot.messages = [{\n      \"df_type\": \"text\",\n      \"text\": quick_reply\n    }];\n    this.chatMessages.push({\n      message: quick_reply,\n      quick_replies: [],\n      user: this.human,\n      type: \"text\"\n    });\n    this.chatbotApi.send(this.chatbot).subscribe(data => {\n      console.log(\"-----------> \", data.messages);\n      this.receive(data.messages);\n    });\n    this.chatbotApi.saveChatbot(this.chatbot).subscribe(() => this.router.navigate(['/']), error => alert(error.message));\n    this.chatInputMessage = \"\";\n    this.scrollToBottom();\n  }\n  receive(messages) {\n    for (let i = 0; i < messages.length; i++) {\n      messages[i] = messages[i].replace(/'/g, '\"');\n      var dict_message = JSON.parse(messages[i]);\n      if (dict_message.text != \"\") {\n        console.log(\"---> ..\", dict_message);\n        if (dict_message['df_type'] == 'text') {\n          if (dict_message['text'].match(/youtube\\.com/)) {\n            var safeURL = this._sanitizer.sanitize(5, this._sanitizer.bypassSecurityTrustResourceUrl(dict_message['text']));\n            console.log(\"SAFE : \", safeURL);\n            this.chatMessages.push({\n              message: safeURL,\n              quick_replies: [],\n              user: this.bot,\n              type: 'youtube_link'\n            });\n          } else {\n            this.chatMessages.push({\n              message: dict_message['text'],\n              quick_replies: [],\n              user: this.bot,\n              type: dict_message['df_type']\n            });\n          }\n        } else if (dict_message['df_type'] == 'quick_replies') {\n          this.chatMessages.push({\n            message: dict_message['text'],\n            quick_replies: dict_message['quick_replies'],\n            user: this.bot,\n            type: dict_message['df_type']\n          });\n        }\n      }\n    }\n    this.scrollToBottom();\n  }\n  scrollToBottom() {\n    const maxScroll = this.list?.nativeElement.scrollHeight;\n    this.list?.nativeElement.scrollTo({\n      top: maxScroll,\n      behavior: 'smooth'\n    });\n  }\n};\n__decorate([ViewChild('chatListContainer')], AppComponent.prototype, \"list\", void 0);\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.less']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","AppComponent","constructor","chatbotApi","router","_sanitizer","messages","id","user","bot","message","quick_replies","type","ngAfterViewChecked","scrollToBottom","saveChatbot","chatbot","chatMessages","push","human","send","subscribe","data","console","log","receive","navigate","error","alert","chatInputMessage","replaceInput","quick_reply","i","length","replace","dict_message","JSON","parse","text","match","safeURL","sanitize","bypassSecurityTrustResourceUrl","maxScroll","list","nativeElement","scrollHeight","scrollTo","top","behavior","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/jordisaleilles/Desktop/MECC/MECC/frontend/src/app/app.component.ts"],"sourcesContent":["import {Component, ElementRef, ViewChild} from '@angular/core';\nimport {ChatbotApiService} from \"./chatbot/chatbot-api.service\";\nimport {Router} from \"@angular/router\";\nimport { DomSanitizer } from '@angular/platform-browser';\n\ninterface Dictionary<T> {\n  [Key: string]: T;\n}\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.less']\n})\nexport class AppComponent {\n title = 'chat-ui';\n\n message = \"\";\n\n chatbot = {\n     messages: [{\"df_type\":\"\", \"text\":\"\"}],\n };\n\n constructor(private chatbotApi: ChatbotApiService, private router: Router, private _sanitizer: DomSanitizer) { }\n\n @ViewChild('chatListContainer') list?: ElementRef<HTMLDivElement>;\n chatInputMessage: string = \"\";\n human = {\n    id: 1\n  }\n\n  bot = {\n    id: 2\n  }\n\n chatMessages: {\n  user: any,\n  message: string,\n  quick_replies: any,\n  type: string\n}[] = [\n  {\n    user: this.bot,\n    message: \"Hey!\",\n    quick_replies: [],\n    type: \"text\"\n  }\n];\n\n ngAfterViewChecked() {\n   this.scrollToBottom()\n }\n\n\n saveChatbot() {\n  this.chatbot.messages = [{\"df_type\":\"text\", \"text\":this.message}];\n  this.chatMessages.push({\n    message:  this.message,\n    quick_replies: [],\n    user: this.human,\n    type: \"text\"\n  });\n  this.chatbotApi.send(this.chatbot).subscribe(data => {\n    console.log(\"-----------> \", data.messages);\n    this.receive(data.messages);\n  });\n  this.chatbotApi\n    .saveChatbot(this.chatbot)\n    .subscribe(\n      () => this.router.navigate(['/']),\n      error => alert(error.message)\n    );\n  this.chatInputMessage = \"\"\n  this.scrollToBottom()\n}\nreplaceInput(quick_reply: string) { \n  console.log(\"REPLY : \", quick_reply);\n  this.chatbot.messages = [{\"df_type\":\"text\", \"text\":quick_reply}];\n  this.chatMessages.push({\n    message:  quick_reply,\n    quick_replies: [],\n    user: this.human,\n    type: \"text\"\n  });\n  this.chatbotApi.send(this.chatbot).subscribe(data => {\n    console.log(\"-----------> \", data.messages);\n    this.receive(data.messages);\n  });\n  this.chatbotApi\n    .saveChatbot(this.chatbot)\n    .subscribe(\n      () => this.router.navigate(['/']),\n      error => alert(error.message)\n    );\n  this.chatInputMessage = \"\"\n  this.scrollToBottom()\n };\n\nreceive(messages: Array<string>) {\n  for(let i=0; i<messages.length; i++){\n    messages[i] = messages[i].replace(/'/g, '\"');\n    var dict_message =JSON.parse(messages[i]);\n    if(dict_message.text != \"\"){\n      console.log(\"---> ..\", dict_message);\n      if(dict_message['df_type'] == 'text'){\n        if(dict_message['text'].match(/youtube\\.com/)) {\n          var safeURL = this._sanitizer.sanitize(5, this._sanitizer.bypassSecurityTrustResourceUrl(dict_message['text'])) as string;\n          console.log(\"SAFE : \", safeURL);\n          this.chatMessages.push({\n            message: safeURL,\n            quick_replies: [],\n            user: this.bot,\n            type: 'youtube_link'\n          });\n        } else {          \n          this.chatMessages.push({\n            message: dict_message['text'],\n            quick_replies: [],\n            user: this.bot,\n            type: dict_message['df_type']\n          });\n        }\n      } else if(dict_message['df_type'] == 'quick_replies'){\n        this.chatMessages.push({\n          message: dict_message['text'],\n          quick_replies: dict_message['quick_replies'],\n          user: this.bot,\n          type: dict_message['df_type']\n        });\n      }\n    }\n  }\nthis.scrollToBottom()\n}\n scrollToBottom() {\n   const maxScroll = this.list?.nativeElement.scrollHeight;\n   this.list?.nativeElement.scrollTo({top: maxScroll, behavior: 'smooth'});\n }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}